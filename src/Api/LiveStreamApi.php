<?php
/**
 * LiveStreamApi
 * PHP version 8.1
 *
 * @package  Cloudinary\Video\LiveStreaming
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Video Live Streaming (Beta)
 *
 * Use the Video Live Streaming API to create and manage your RTMP live streams. This includes managing outputs as well as manually starting and stopping streams. See the [live streaming guide](https://cloudinary.com/documentation/video_live_streaming) for information on how to use the Live Streaming API to stream video to your users.    **Note**: The Live Streaming API is currently in development and is available as a Public Beta, which means we value your feedback, so please feel free to [share any thoughts with us](https://support.cloudinary.com/hc/en-us/requests/new).    The API supports Basic Authentication using your Cloudinary API Key and API Secret (which can be found on the Dashboard page of your [Cloudinary Console](https://console.cloudinary.com/pm)).
 *
 * The version of the OpenAPI document: 0.1.9
 * Contact: support@cloudinary.com
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Cloudinary\Video\LiveStreaming\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use Cloudinary\Video\LiveStreaming\ApiException;
use Cloudinary\Video\LiveStreaming\Configuration;
use Cloudinary\Video\LiveStreaming\HeaderSelector;
use Cloudinary\Video\LiveStreaming\ObjectSerializer;

/**
 * LiveStreamApi Class Doc Comment
 *
 * @package  Cloudinary\Video\LiveStreaming
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LiveStreamApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'activateLiveStream' => [
            'application/json',
        ],
        'createLiveStream' => [
            'application/json',
        ],
        'createLiveStreamOutput' => [
            'application/json',
        ],
        'deleteLiveStream' => [
            'application/json',
        ],
        'deleteLiveStreamOutput' => [
            'application/json',
        ],
        'getLiveStream' => [
            'application/json',
        ],
        'getLiveStreamOutput' => [
            'application/json',
        ],
        'getLiveStreamOutputs' => [
            'application/json',
        ],
        'getLiveStreams' => [
            'application/json',
        ],
        'idleLiveStream' => [
            'application/json',
        ],
        'updateLiveStream' => [
            'application/json',
        ],
        'updateLiveStreamOutput' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation activateLiveStream
     *
     * Manually activate a live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateLiveStream'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse
     */
    public function activateLiveStream(
        string $liveStreamId,
        string $contentType = self::contentTypes['activateLiveStream'][0]
    ): \Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse
    {
        list($response) = $this->activateLiveStreamWithHttpInfo($liveStreamId, $contentType);
        return $response;
    }

    /**
     * Operation activateLiveStreamWithHttpInfo
     *
     * Manually activate a live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateLiveStream'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function activateLiveStreamWithHttpInfo(
        string $liveStreamId,
        string $contentType = self::contentTypes['activateLiveStream'][0]
    ): array
    {
        $request = $this->activateLiveStreamRequest($liveStreamId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation activateLiveStreamAsync
     *
     * Manually activate a live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateLiveStream'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function activateLiveStreamAsync(
        string $liveStreamId,
        string $contentType = self::contentTypes['activateLiveStream'][0]
    ): PromiseInterface
    {
        return $this->activateLiveStreamAsyncWithHttpInfo($liveStreamId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation activateLiveStreamAsyncWithHttpInfo
     *
     * Manually activate a live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateLiveStream'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function activateLiveStreamAsyncWithHttpInfo(
        $liveStreamId,
        string $contentType = self::contentTypes['activateLiveStream'][0]
    ): PromiseInterface
    {
        $returnType = '\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse';
        $request = $this->activateLiveStreamRequest($liveStreamId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'activateLiveStream'
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateLiveStream'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function activateLiveStreamRequest(
        $liveStreamId,
        string $contentType = self::contentTypes['activateLiveStream'][0]
    ): Request
    {

        // verify the required parameter 'liveStreamId' is set
        if ($liveStreamId === null || (is_array($liveStreamId) && count($liveStreamId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $liveStreamId when calling activateLiveStream'
            );
        }


        $resourcePath = '/live_streams/{liveStreamId}/activate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($liveStreamId !== null) {
            $resourcePath = str_replace(
                '{' . 'liveStreamId' . '}',
                ObjectSerializer::toPathValue($liveStreamId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLiveStream
     *
     * Create a new live stream
     *
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamCreatePayload|null $liveStreamCreatePayload liveStreamCreatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLiveStream'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse
     */
    public function createLiveStream(
        ?\Cloudinary\Video\LiveStreaming\Model\LiveStreamCreatePayload $liveStreamCreatePayload = null,
        string $contentType = self::contentTypes['createLiveStream'][0]
    ): \Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse
    {
        list($response) = $this->createLiveStreamWithHttpInfo($liveStreamCreatePayload, $contentType);
        return $response;
    }

    /**
     * Operation createLiveStreamWithHttpInfo
     *
     * Create a new live stream
     *
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamCreatePayload|null $liveStreamCreatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLiveStream'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLiveStreamWithHttpInfo(
        ?\Cloudinary\Video\LiveStreaming\Model\LiveStreamCreatePayload $liveStreamCreatePayload = null,
        string $contentType = self::contentTypes['createLiveStream'][0]
    ): array
    {
        $request = $this->createLiveStreamRequest($liveStreamCreatePayload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLiveStreamAsync
     *
     * Create a new live stream
     *
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamCreatePayload|null $liveStreamCreatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLiveStream'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createLiveStreamAsync(
        ?\Cloudinary\Video\LiveStreaming\Model\LiveStreamCreatePayload $liveStreamCreatePayload = null,
        string $contentType = self::contentTypes['createLiveStream'][0]
    ): PromiseInterface
    {
        return $this->createLiveStreamAsyncWithHttpInfo($liveStreamCreatePayload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLiveStreamAsyncWithHttpInfo
     *
     * Create a new live stream
     *
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamCreatePayload|null $liveStreamCreatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLiveStream'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createLiveStreamAsyncWithHttpInfo(
        $liveStreamCreatePayload = null,
        string $contentType = self::contentTypes['createLiveStream'][0]
    ): PromiseInterface
    {
        $returnType = '\Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse';
        $request = $this->createLiveStreamRequest($liveStreamCreatePayload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLiveStream'
     *
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamCreatePayload|null $liveStreamCreatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLiveStream'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLiveStreamRequest(
        $liveStreamCreatePayload = null,
        string $contentType = self::contentTypes['createLiveStream'][0]
    ): Request
    {



        $resourcePath = '/live_streams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($liveStreamCreatePayload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($liveStreamCreatePayload));
            } else {
                $httpBody = $liveStreamCreatePayload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createLiveStreamOutput
     *
     * Create a new live stream output
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputCreatePayload|null $liveStreamOutputCreatePayload liveStreamOutputCreatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse
     */
    public function createLiveStreamOutput(
        string $liveStreamId,
        ?\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputCreatePayload $liveStreamOutputCreatePayload = null,
        string $contentType = self::contentTypes['createLiveStreamOutput'][0]
    ): \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse
    {
        list($response) = $this->createLiveStreamOutputWithHttpInfo($liveStreamId, $liveStreamOutputCreatePayload, $contentType);
        return $response;
    }

    /**
     * Operation createLiveStreamOutputWithHttpInfo
     *
     * Create a new live stream output
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputCreatePayload|null $liveStreamOutputCreatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLiveStreamOutputWithHttpInfo(
        string $liveStreamId,
        ?\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputCreatePayload $liveStreamOutputCreatePayload = null,
        string $contentType = self::contentTypes['createLiveStreamOutput'][0]
    ): array
    {
        $request = $this->createLiveStreamOutputRequest($liveStreamId, $liveStreamOutputCreatePayload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createLiveStreamOutputAsync
     *
     * Create a new live stream output
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputCreatePayload|null $liveStreamOutputCreatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createLiveStreamOutputAsync(
        string $liveStreamId,
        ?\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputCreatePayload $liveStreamOutputCreatePayload = null,
        string $contentType = self::contentTypes['createLiveStreamOutput'][0]
    ): PromiseInterface
    {
        return $this->createLiveStreamOutputAsyncWithHttpInfo($liveStreamId, $liveStreamOutputCreatePayload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLiveStreamOutputAsyncWithHttpInfo
     *
     * Create a new live stream output
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputCreatePayload|null $liveStreamOutputCreatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createLiveStreamOutputAsyncWithHttpInfo(
        $liveStreamId,
        $liveStreamOutputCreatePayload = null,
        string $contentType = self::contentTypes['createLiveStreamOutput'][0]
    ): PromiseInterface
    {
        $returnType = '\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse';
        $request = $this->createLiveStreamOutputRequest($liveStreamId, $liveStreamOutputCreatePayload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLiveStreamOutput'
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputCreatePayload|null $liveStreamOutputCreatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLiveStreamOutputRequest(
        $liveStreamId,
        $liveStreamOutputCreatePayload = null,
        string $contentType = self::contentTypes['createLiveStreamOutput'][0]
    ): Request
    {

        // verify the required parameter 'liveStreamId' is set
        if ($liveStreamId === null || (is_array($liveStreamId) && count($liveStreamId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $liveStreamId when calling createLiveStreamOutput'
            );
        }



        $resourcePath = '/live_streams/{liveStreamId}/outputs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($liveStreamId !== null) {
            $resourcePath = str_replace(
                '{' . 'liveStreamId' . '}',
                ObjectSerializer::toPathValue($liveStreamId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($liveStreamOutputCreatePayload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($liveStreamOutputCreatePayload));
            } else {
                $httpBody = $liveStreamOutputCreatePayload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLiveStream
     *
     * Delete a live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLiveStream'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse
     */
    public function deleteLiveStream(
        string $liveStreamId,
        string $contentType = self::contentTypes['deleteLiveStream'][0]
    ): \Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse
    {
        list($response) = $this->deleteLiveStreamWithHttpInfo($liveStreamId, $contentType);
        return $response;
    }

    /**
     * Operation deleteLiveStreamWithHttpInfo
     *
     * Delete a live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLiveStream'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLiveStreamWithHttpInfo(
        string $liveStreamId,
        string $contentType = self::contentTypes['deleteLiveStream'][0]
    ): array
    {
        $request = $this->deleteLiveStreamRequest($liveStreamId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLiveStreamAsync
     *
     * Delete a live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLiveStream'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteLiveStreamAsync(
        string $liveStreamId,
        string $contentType = self::contentTypes['deleteLiveStream'][0]
    ): PromiseInterface
    {
        return $this->deleteLiveStreamAsyncWithHttpInfo($liveStreamId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLiveStreamAsyncWithHttpInfo
     *
     * Delete a live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLiveStream'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteLiveStreamAsyncWithHttpInfo(
        $liveStreamId,
        string $contentType = self::contentTypes['deleteLiveStream'][0]
    ): PromiseInterface
    {
        $returnType = '\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse';
        $request = $this->deleteLiveStreamRequest($liveStreamId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLiveStream'
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLiveStream'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLiveStreamRequest(
        $liveStreamId,
        string $contentType = self::contentTypes['deleteLiveStream'][0]
    ): Request
    {

        // verify the required parameter 'liveStreamId' is set
        if ($liveStreamId === null || (is_array($liveStreamId) && count($liveStreamId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $liveStreamId when calling deleteLiveStream'
            );
        }


        $resourcePath = '/live_streams/{liveStreamId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($liveStreamId !== null) {
            $resourcePath = str_replace(
                '{' . 'liveStreamId' . '}',
                ObjectSerializer::toPathValue($liveStreamId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLiveStreamOutput
     *
     * Delete a live stream output
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $liveStreamOutputId live stream output id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse
     */
    public function deleteLiveStreamOutput(
        string $liveStreamId,
        string $liveStreamOutputId,
        string $contentType = self::contentTypes['deleteLiveStreamOutput'][0]
    ): \Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse
    {
        list($response) = $this->deleteLiveStreamOutputWithHttpInfo($liveStreamId, $liveStreamOutputId, $contentType);
        return $response;
    }

    /**
     * Operation deleteLiveStreamOutputWithHttpInfo
     *
     * Delete a live stream output
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $liveStreamOutputId live stream output id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLiveStreamOutputWithHttpInfo(
        string $liveStreamId,
        string $liveStreamOutputId,
        string $contentType = self::contentTypes['deleteLiveStreamOutput'][0]
    ): array
    {
        $request = $this->deleteLiveStreamOutputRequest($liveStreamId, $liveStreamOutputId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLiveStreamOutputAsync
     *
     * Delete a live stream output
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $liveStreamOutputId live stream output id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteLiveStreamOutputAsync(
        string $liveStreamId,
        string $liveStreamOutputId,
        string $contentType = self::contentTypes['deleteLiveStreamOutput'][0]
    ): PromiseInterface
    {
        return $this->deleteLiveStreamOutputAsyncWithHttpInfo($liveStreamId, $liveStreamOutputId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLiveStreamOutputAsyncWithHttpInfo
     *
     * Delete a live stream output
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $liveStreamOutputId live stream output id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteLiveStreamOutputAsyncWithHttpInfo(
        $liveStreamId,
        $liveStreamOutputId,
        string $contentType = self::contentTypes['deleteLiveStreamOutput'][0]
    ): PromiseInterface
    {
        $returnType = '\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse';
        $request = $this->deleteLiveStreamOutputRequest($liveStreamId, $liveStreamOutputId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLiveStreamOutput'
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $liveStreamOutputId live stream output id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLiveStreamOutputRequest(
        $liveStreamId,
        $liveStreamOutputId,
        string $contentType = self::contentTypes['deleteLiveStreamOutput'][0]
    ): Request
    {

        // verify the required parameter 'liveStreamId' is set
        if ($liveStreamId === null || (is_array($liveStreamId) && count($liveStreamId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $liveStreamId when calling deleteLiveStreamOutput'
            );
        }

        // verify the required parameter 'liveStreamOutputId' is set
        if ($liveStreamOutputId === null || (is_array($liveStreamOutputId) && count($liveStreamOutputId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $liveStreamOutputId when calling deleteLiveStreamOutput'
            );
        }


        $resourcePath = '/live_streams/{liveStreamId}/outputs/{liveStreamOutputId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($liveStreamId !== null) {
            $resourcePath = str_replace(
                '{' . 'liveStreamId' . '}',
                ObjectSerializer::toPathValue($liveStreamId),
                $resourcePath
            );
        }
        // path params
        if ($liveStreamOutputId !== null) {
            $resourcePath = str_replace(
                '{' . 'liveStreamOutputId' . '}',
                ObjectSerializer::toPathValue($liveStreamOutputId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLiveStream
     *
     * Get a single live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStream'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse
     */
    public function getLiveStream(
        string $liveStreamId,
        string $contentType = self::contentTypes['getLiveStream'][0]
    ): \Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse
    {
        list($response) = $this->getLiveStreamWithHttpInfo($liveStreamId, $contentType);
        return $response;
    }

    /**
     * Operation getLiveStreamWithHttpInfo
     *
     * Get a single live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStream'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLiveStreamWithHttpInfo(
        string $liveStreamId,
        string $contentType = self::contentTypes['getLiveStream'][0]
    ): array
    {
        $request = $this->getLiveStreamRequest($liveStreamId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLiveStreamAsync
     *
     * Get a single live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStream'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLiveStreamAsync(
        string $liveStreamId,
        string $contentType = self::contentTypes['getLiveStream'][0]
    ): PromiseInterface
    {
        return $this->getLiveStreamAsyncWithHttpInfo($liveStreamId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLiveStreamAsyncWithHttpInfo
     *
     * Get a single live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStream'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLiveStreamAsyncWithHttpInfo(
        $liveStreamId,
        string $contentType = self::contentTypes['getLiveStream'][0]
    ): PromiseInterface
    {
        $returnType = '\Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse';
        $request = $this->getLiveStreamRequest($liveStreamId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLiveStream'
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStream'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLiveStreamRequest(
        $liveStreamId,
        string $contentType = self::contentTypes['getLiveStream'][0]
    ): Request
    {

        // verify the required parameter 'liveStreamId' is set
        if ($liveStreamId === null || (is_array($liveStreamId) && count($liveStreamId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $liveStreamId when calling getLiveStream'
            );
        }


        $resourcePath = '/live_streams/{liveStreamId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($liveStreamId !== null) {
            $resourcePath = str_replace(
                '{' . 'liveStreamId' . '}',
                ObjectSerializer::toPathValue($liveStreamId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLiveStreamOutput
     *
     * Get a single live stream output
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $liveStreamOutputId live stream output id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse
     */
    public function getLiveStreamOutput(
        string $liveStreamId,
        string $liveStreamOutputId,
        string $contentType = self::contentTypes['getLiveStreamOutput'][0]
    ): \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse
    {
        list($response) = $this->getLiveStreamOutputWithHttpInfo($liveStreamId, $liveStreamOutputId, $contentType);
        return $response;
    }

    /**
     * Operation getLiveStreamOutputWithHttpInfo
     *
     * Get a single live stream output
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $liveStreamOutputId live stream output id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLiveStreamOutputWithHttpInfo(
        string $liveStreamId,
        string $liveStreamOutputId,
        string $contentType = self::contentTypes['getLiveStreamOutput'][0]
    ): array
    {
        $request = $this->getLiveStreamOutputRequest($liveStreamId, $liveStreamOutputId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLiveStreamOutputAsync
     *
     * Get a single live stream output
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $liveStreamOutputId live stream output id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLiveStreamOutputAsync(
        string $liveStreamId,
        string $liveStreamOutputId,
        string $contentType = self::contentTypes['getLiveStreamOutput'][0]
    ): PromiseInterface
    {
        return $this->getLiveStreamOutputAsyncWithHttpInfo($liveStreamId, $liveStreamOutputId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLiveStreamOutputAsyncWithHttpInfo
     *
     * Get a single live stream output
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $liveStreamOutputId live stream output id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLiveStreamOutputAsyncWithHttpInfo(
        $liveStreamId,
        $liveStreamOutputId,
        string $contentType = self::contentTypes['getLiveStreamOutput'][0]
    ): PromiseInterface
    {
        $returnType = '\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse';
        $request = $this->getLiveStreamOutputRequest($liveStreamId, $liveStreamOutputId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLiveStreamOutput'
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $liveStreamOutputId live stream output id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLiveStreamOutputRequest(
        $liveStreamId,
        $liveStreamOutputId,
        string $contentType = self::contentTypes['getLiveStreamOutput'][0]
    ): Request
    {

        // verify the required parameter 'liveStreamId' is set
        if ($liveStreamId === null || (is_array($liveStreamId) && count($liveStreamId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $liveStreamId when calling getLiveStreamOutput'
            );
        }

        // verify the required parameter 'liveStreamOutputId' is set
        if ($liveStreamOutputId === null || (is_array($liveStreamOutputId) && count($liveStreamOutputId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $liveStreamOutputId when calling getLiveStreamOutput'
            );
        }


        $resourcePath = '/live_streams/{liveStreamId}/outputs/{liveStreamOutputId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($liveStreamId !== null) {
            $resourcePath = str_replace(
                '{' . 'liveStreamId' . '}',
                ObjectSerializer::toPathValue($liveStreamId),
                $resourcePath
            );
        }
        // path params
        if ($liveStreamOutputId !== null) {
            $resourcePath = str_replace(
                '{' . 'liveStreamOutputId' . '}',
                ObjectSerializer::toPathValue($liveStreamOutputId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLiveStreamOutputs
     *
     * Get a list of live stream outputs
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStreamOutputs'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputsWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse
     */
    public function getLiveStreamOutputs(
        string $liveStreamId,
        string $contentType = self::contentTypes['getLiveStreamOutputs'][0]
    ): \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputsWrappedResponse
    {
        list($response) = $this->getLiveStreamOutputsWithHttpInfo($liveStreamId, $contentType);
        return $response;
    }

    /**
     * Operation getLiveStreamOutputsWithHttpInfo
     *
     * Get a list of live stream outputs
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStreamOutputs'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputsWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLiveStreamOutputsWithHttpInfo(
        string $liveStreamId,
        string $contentType = self::contentTypes['getLiveStreamOutputs'][0]
    ): array
    {
        $request = $this->getLiveStreamOutputsRequest($liveStreamId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputsWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputsWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputsWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputsWrappedResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputsWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLiveStreamOutputsAsync
     *
     * Get a list of live stream outputs
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStreamOutputs'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLiveStreamOutputsAsync(
        string $liveStreamId,
        string $contentType = self::contentTypes['getLiveStreamOutputs'][0]
    ): PromiseInterface
    {
        return $this->getLiveStreamOutputsAsyncWithHttpInfo($liveStreamId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLiveStreamOutputsAsyncWithHttpInfo
     *
     * Get a list of live stream outputs
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStreamOutputs'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLiveStreamOutputsAsyncWithHttpInfo(
        $liveStreamId,
        string $contentType = self::contentTypes['getLiveStreamOutputs'][0]
    ): PromiseInterface
    {
        $returnType = '\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputsWrappedResponse';
        $request = $this->getLiveStreamOutputsRequest($liveStreamId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLiveStreamOutputs'
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStreamOutputs'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLiveStreamOutputsRequest(
        $liveStreamId,
        string $contentType = self::contentTypes['getLiveStreamOutputs'][0]
    ): Request
    {

        // verify the required parameter 'liveStreamId' is set
        if ($liveStreamId === null || (is_array($liveStreamId) && count($liveStreamId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $liveStreamId when calling getLiveStreamOutputs'
            );
        }


        $resourcePath = '/live_streams/{liveStreamId}/outputs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($liveStreamId !== null) {
            $resourcePath = str_replace(
                '{' . 'liveStreamId' . '}',
                ObjectSerializer::toPathValue($liveStreamId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLiveStreams
     *
     * Get a list of live streams
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStreams'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cloudinary\Video\LiveStreaming\Model\LiveStreamsWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse
     */
    public function getLiveStreams(
        string $contentType = self::contentTypes['getLiveStreams'][0]
    ): \Cloudinary\Video\LiveStreaming\Model\LiveStreamsWrappedResponse
    {
        list($response) = $this->getLiveStreamsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getLiveStreamsWithHttpInfo
     *
     * Get a list of live streams
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStreams'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cloudinary\Video\LiveStreaming\Model\LiveStreamsWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLiveStreamsWithHttpInfo(
        string $contentType = self::contentTypes['getLiveStreams'][0]
    ): array
    {
        $request = $this->getLiveStreamsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cloudinary\Video\LiveStreaming\Model\LiveStreamsWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\LiveStreamsWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\LiveStreamsWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cloudinary\Video\LiveStreaming\Model\LiveStreamsWrappedResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\LiveStreamsWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLiveStreamsAsync
     *
     * Get a list of live streams
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStreams'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLiveStreamsAsync(
        string $contentType = self::contentTypes['getLiveStreams'][0]
    ): PromiseInterface
    {
        return $this->getLiveStreamsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLiveStreamsAsyncWithHttpInfo
     *
     * Get a list of live streams
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStreams'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLiveStreamsAsyncWithHttpInfo(
        string $contentType = self::contentTypes['getLiveStreams'][0]
    ): PromiseInterface
    {
        $returnType = '\Cloudinary\Video\LiveStreaming\Model\LiveStreamsWrappedResponse';
        $request = $this->getLiveStreamsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLiveStreams'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLiveStreams'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLiveStreamsRequest(
        string $contentType = self::contentTypes['getLiveStreams'][0]
    ): Request
    {


        $resourcePath = '/live_streams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation idleLiveStream
     *
     * Manually idle a live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['idleLiveStream'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse
     */
    public function idleLiveStream(
        string $liveStreamId,
        string $contentType = self::contentTypes['idleLiveStream'][0]
    ): \Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse
    {
        list($response) = $this->idleLiveStreamWithHttpInfo($liveStreamId, $contentType);
        return $response;
    }

    /**
     * Operation idleLiveStreamWithHttpInfo
     *
     * Manually idle a live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['idleLiveStream'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function idleLiveStreamWithHttpInfo(
        string $liveStreamId,
        string $contentType = self::contentTypes['idleLiveStream'][0]
    ): array
    {
        $request = $this->idleLiveStreamRequest($liveStreamId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation idleLiveStreamAsync
     *
     * Manually idle a live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['idleLiveStream'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function idleLiveStreamAsync(
        string $liveStreamId,
        string $contentType = self::contentTypes['idleLiveStream'][0]
    ): PromiseInterface
    {
        return $this->idleLiveStreamAsyncWithHttpInfo($liveStreamId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation idleLiveStreamAsyncWithHttpInfo
     *
     * Manually idle a live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['idleLiveStream'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function idleLiveStreamAsyncWithHttpInfo(
        $liveStreamId,
        string $contentType = self::contentTypes['idleLiveStream'][0]
    ): PromiseInterface
    {
        $returnType = '\Cloudinary\Video\LiveStreaming\Model\MessageWrappedResponse';
        $request = $this->idleLiveStreamRequest($liveStreamId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'idleLiveStream'
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['idleLiveStream'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function idleLiveStreamRequest(
        $liveStreamId,
        string $contentType = self::contentTypes['idleLiveStream'][0]
    ): Request
    {

        // verify the required parameter 'liveStreamId' is set
        if ($liveStreamId === null || (is_array($liveStreamId) && count($liveStreamId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $liveStreamId when calling idleLiveStream'
            );
        }


        $resourcePath = '/live_streams/{liveStreamId}/idle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($liveStreamId !== null) {
            $resourcePath = str_replace(
                '{' . 'liveStreamId' . '}',
                ObjectSerializer::toPathValue($liveStreamId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLiveStream
     *
     * Update a live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamUpdatePayload|null $liveStreamUpdatePayload liveStreamUpdatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLiveStream'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse
     */
    public function updateLiveStream(
        string $liveStreamId,
        ?\Cloudinary\Video\LiveStreaming\Model\LiveStreamUpdatePayload $liveStreamUpdatePayload = null,
        string $contentType = self::contentTypes['updateLiveStream'][0]
    ): \Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse
    {
        list($response) = $this->updateLiveStreamWithHttpInfo($liveStreamId, $liveStreamUpdatePayload, $contentType);
        return $response;
    }

    /**
     * Operation updateLiveStreamWithHttpInfo
     *
     * Update a live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamUpdatePayload|null $liveStreamUpdatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLiveStream'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLiveStreamWithHttpInfo(
        string $liveStreamId,
        ?\Cloudinary\Video\LiveStreaming\Model\LiveStreamUpdatePayload $liveStreamUpdatePayload = null,
        string $contentType = self::contentTypes['updateLiveStream'][0]
    ): array
    {
        $request = $this->updateLiveStreamRequest($liveStreamId, $liveStreamUpdatePayload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLiveStreamAsync
     *
     * Update a live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamUpdatePayload|null $liveStreamUpdatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLiveStream'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateLiveStreamAsync(
        string $liveStreamId,
        ?\Cloudinary\Video\LiveStreaming\Model\LiveStreamUpdatePayload $liveStreamUpdatePayload = null,
        string $contentType = self::contentTypes['updateLiveStream'][0]
    ): PromiseInterface
    {
        return $this->updateLiveStreamAsyncWithHttpInfo($liveStreamId, $liveStreamUpdatePayload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLiveStreamAsyncWithHttpInfo
     *
     * Update a live stream
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamUpdatePayload|null $liveStreamUpdatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLiveStream'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateLiveStreamAsyncWithHttpInfo(
        $liveStreamId,
        $liveStreamUpdatePayload = null,
        string $contentType = self::contentTypes['updateLiveStream'][0]
    ): PromiseInterface
    {
        $returnType = '\Cloudinary\Video\LiveStreaming\Model\LiveStreamWrappedResponse';
        $request = $this->updateLiveStreamRequest($liveStreamId, $liveStreamUpdatePayload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLiveStream'
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamUpdatePayload|null $liveStreamUpdatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLiveStream'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLiveStreamRequest(
        $liveStreamId,
        $liveStreamUpdatePayload = null,
        string $contentType = self::contentTypes['updateLiveStream'][0]
    ): Request
    {

        // verify the required parameter 'liveStreamId' is set
        if ($liveStreamId === null || (is_array($liveStreamId) && count($liveStreamId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $liveStreamId when calling updateLiveStream'
            );
        }



        $resourcePath = '/live_streams/{liveStreamId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($liveStreamId !== null) {
            $resourcePath = str_replace(
                '{' . 'liveStreamId' . '}',
                ObjectSerializer::toPathValue($liveStreamId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($liveStreamUpdatePayload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($liveStreamUpdatePayload));
            } else {
                $httpBody = $liveStreamUpdatePayload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLiveStreamOutput
     *
     * Update a live stream output
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $liveStreamOutputId live stream output id (required)
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputUpdatePayload|null $liveStreamOutputUpdatePayload liveStreamOutputUpdatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse
     */
    public function updateLiveStreamOutput(
        string $liveStreamId,
        string $liveStreamOutputId,
        ?\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputUpdatePayload $liveStreamOutputUpdatePayload = null,
        string $contentType = self::contentTypes['updateLiveStreamOutput'][0]
    ): \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse
    {
        list($response) = $this->updateLiveStreamOutputWithHttpInfo($liveStreamId, $liveStreamOutputId, $liveStreamOutputUpdatePayload, $contentType);
        return $response;
    }

    /**
     * Operation updateLiveStreamOutputWithHttpInfo
     *
     * Update a live stream output
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $liveStreamOutputId live stream output id (required)
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputUpdatePayload|null $liveStreamOutputUpdatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse|\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLiveStreamOutputWithHttpInfo(
        string $liveStreamId,
        string $liveStreamOutputId,
        ?\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputUpdatePayload $liveStreamOutputUpdatePayload = null,
        string $contentType = self::contentTypes['updateLiveStreamOutput'][0]
    ): array
    {
        $request = $this->updateLiveStreamOutputRequest($liveStreamId, $liveStreamOutputId, $liveStreamOutputUpdatePayload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Cloudinary\Video\LiveStreaming\Model\ErrorWrappedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLiveStreamOutputAsync
     *
     * Update a live stream output
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $liveStreamOutputId live stream output id (required)
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputUpdatePayload|null $liveStreamOutputUpdatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateLiveStreamOutputAsync(
        string $liveStreamId,
        string $liveStreamOutputId,
        ?\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputUpdatePayload $liveStreamOutputUpdatePayload = null,
        string $contentType = self::contentTypes['updateLiveStreamOutput'][0]
    ): PromiseInterface
    {
        return $this->updateLiveStreamOutputAsyncWithHttpInfo($liveStreamId, $liveStreamOutputId, $liveStreamOutputUpdatePayload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLiveStreamOutputAsyncWithHttpInfo
     *
     * Update a live stream output
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $liveStreamOutputId live stream output id (required)
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputUpdatePayload|null $liveStreamOutputUpdatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateLiveStreamOutputAsyncWithHttpInfo(
        $liveStreamId,
        $liveStreamOutputId,
        $liveStreamOutputUpdatePayload = null,
        string $contentType = self::contentTypes['updateLiveStreamOutput'][0]
    ): PromiseInterface
    {
        $returnType = '\Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputWrappedResponse';
        $request = $this->updateLiveStreamOutputRequest($liveStreamId, $liveStreamOutputId, $liveStreamOutputUpdatePayload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLiveStreamOutput'
     *
     * @param  string $liveStreamId live stream id (required)
     * @param  string $liveStreamOutputId live stream output id (required)
     * @param  \Cloudinary\Video\LiveStreaming\Model\LiveStreamOutputUpdatePayload|null $liveStreamOutputUpdatePayload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLiveStreamOutput'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLiveStreamOutputRequest(
        $liveStreamId,
        $liveStreamOutputId,
        $liveStreamOutputUpdatePayload = null,
        string $contentType = self::contentTypes['updateLiveStreamOutput'][0]
    ): Request
    {

        // verify the required parameter 'liveStreamId' is set
        if ($liveStreamId === null || (is_array($liveStreamId) && count($liveStreamId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $liveStreamId when calling updateLiveStreamOutput'
            );
        }

        // verify the required parameter 'liveStreamOutputId' is set
        if ($liveStreamOutputId === null || (is_array($liveStreamOutputId) && count($liveStreamOutputId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $liveStreamOutputId when calling updateLiveStreamOutput'
            );
        }



        $resourcePath = '/live_streams/{liveStreamId}/outputs/{liveStreamOutputId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($liveStreamId !== null) {
            $resourcePath = str_replace(
                '{' . 'liveStreamId' . '}',
                ObjectSerializer::toPathValue($liveStreamId),
                $resourcePath
            );
        }
        // path params
        if ($liveStreamOutputId !== null) {
            $resourcePath = str_replace(
                '{' . 'liveStreamOutputId' . '}',
                ObjectSerializer::toPathValue($liveStreamOutputId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($liveStreamOutputUpdatePayload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($liveStreamOutputUpdatePayload));
            } else {
                $httpBody = $liveStreamOutputUpdatePayload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
